Problem Description : 
In a binary tree, the root node is at depth 0, and children of each depth k node are at depth k+1.
Two nodes of a binary tree are cousins if they have the same depth, but have different parents.
We are given the root of a binary tree with unique values, and the values x and y of two different nodes in the tree.
Return true if and only if the nodes corresponding to the values x and y are cousins.\
Example: 
Input: root = [1,2,3,4], x = 4, y = 3
Output: false
Input: root = [1,2,3,null,4,null,5], x = 5, y = 4
Output: true
Input: root = [1,2,3,null,4], x = 2, y = 3
Output: false

Code:
---------------------------
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* parent1;
    TreeNode* parent2;
    int depth1, depth2;
    bool helper(TreeNode* root, int x, int y, TreeNode* parent, int depth){
        if(root == NULL)
            return false;
          if(root->val == x){
            parent1 = parent;
            depth1 = depth;
        }
        if(root->val == y){
            parent2 = parent;
            depth2 = depth;
        }
        if(parent1 && parent2)
         if(depth1 == depth2 && parent1 != parent2){
            cout<<parent1->val<<" "<<parent2->val<<"\n";
            return true;
        }
        return helper(root->left, x, y, root, depth+1)||helper(root->right,x,y, root, depth+1);
      
        }
    bool isCousins(TreeNode* root, int x, int y) {
        if(root == NULL)
            return false;
        return helper(root, x, y, root, 0);
    }
};
