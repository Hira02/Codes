Problem Description:
Find the sum of all left leaves in a given binary tree.

Example:

    3
   / \
  9  20
    /  \
   15   7

There are two left leaves in the binary tree, with values 9 and 15 respectively. Return 24.

Code:
-----------
Approach 1:
---------------------------------------------------------------------------------------------
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void helper(TreeNode* root, int level, int parentLevel, int* sum){
        if(root == NULL)
            return ;
        if(root->left == NULL && root->right == NULL){
            if(level<parentLevel){
                (*sum)+=root->val;
            }
            return ;
        }
        helper(root->left, level-1, level, sum);
        helper(root->right, level+1, level, sum);
    }
    int sumOfLeftLeaves(TreeNode* root) {
        if(root == NULL)
            return 0;
        int level = 0;
        int parentLevel = 0;
        int sum = 0;
        helper(root, level, parentLevel, &sum);
        return sum;
    }
};


Appraoch 2:
--------------------------------------------------------------------------
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    bool checkLeftLeave(TreeNode* root){
        if(root->left){
            if(root->left->left == NULL && root->left->right == NULL){
                return true;
            }
            // return false;
        }
        return false;
    }
    void util(TreeNode* root, int* sum){
        if(root == NULL)
            return ;
        bool check = checkLeftLeave(root);
        if(check){
        (*sum)+=root->left->val;
        }
        util(root->left, sum);
        util(root->right, sum);
    }
    int sumOfLeftLeaves(TreeNode* root) {
        if(root == NULL)
            return 0;
        int sum=0;
        util(root, &sum);
        return sum;
        
    }
};
