Problem Description : 
Given a binary tree, determine if it is a valid binary search tree (BST).

Assume a BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
   2
   / \
  1   3

Input: [2,1,3]
Output: true


Code:
---------
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool helper(TreeNode* root, TreeNode* min,TreeNode* max){
        if(root == NULL)
            return true;
        if(min != NULL && root->val>=min->val)
            return false;
        if(max != NULL && root->val<=max->val)
            return false;
        return helper(root->left,root,max ) && helper(root->right, min, root);
        
        
    }
    bool isValidBST(TreeNode* root) {
        return helper(root, nullptr, nullptr);
        
    }
};
