Problem Description:
Given a binary tree, return the sum of values of nodes with even-valued grandparent.  (A grandparent of a node is the parent of its parent, if it exists.)

If there are no nodes with an even-valued grandparent, return 0
Input: root = [6,7,8,2,7,1,3,9,null,1,4,null,null,null,5]
Output: 18
Explanation: The red nodes are the nodes with even-value grandparent while the blue nodes are the even-value grandparents.

Code:
------------
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void helper(TreeNode* root, int* sum){
        if(root == NULL)
            return ;
        if(root->val %2 == 0){
            if(root->left){
            if(root->left->left){
                (*sum)+=root->left->left->val;
            }
            if(root->left->right){
                (*sum)+=root->left->right->val;
            }
            }
            if(root->right){
            if(root->right->left){
                (*sum)+=root->right->left->val;
            }
            if(root->right->right){
                (*sum)+=root->right->right->val;
            }
            }
        }
        helper(root->left, sum);
        helper(root->right, sum);
    }
    int sumEvenGrandparent(TreeNode* root) {
        if(root == NULL)
            return 0;
        int sum = 0;
        helper(root, &sum);
        return sum;
    }
};
