Code:
----------------------------
#include <bits/stdc++.h>

using namespace std;
#define MAX_SIZE 100005
vector<string> split_string(string);

/*
 * Complete the waiter function below.
 */
 void SieveOfEratosthenes(vector<int> &primes) 
{ 
    bool IsPrime[MAX_SIZE]; 
    memset(IsPrime, true, sizeof(IsPrime)); 
    
    for (int p = 2; p * p < MAX_SIZE; p++) 
    { 
        if (IsPrime[p] == true) 
        { 
            for (int i = p * p; i < MAX_SIZE; i += p) 
                IsPrime[i] = false; 
        } 
    } 
    
    // Store all prime numbers 
    for (int p = 2; p < MAX_SIZE; p++) 
    if (IsPrime[p]) 
            primes.push_back(p); 
            
} 

vector<int> waiter(vector<int> number, int q) {
    /*
     * Write your code here.
     */
     vector<int> temp = number;
     vector<int> res;
    
     
     vector<int> primeStorage;
     SieveOfEratosthenes(primeStorage);

    int n = 0;
    vector<int>B;
    while(n<q){
         vector<int>A;
        int primeValue = primeStorage[n++];
        for(int i=0;i<temp.size();i++){
            if(temp[i] % primeValue == 0){
                res.push_back(temp[i]);
            }else{
                A.push_back(temp[i]);
            }
        }
        if(A.size()>0)
        reverse(A.begin(),A.end());
        temp = A;
        
    }
 
        for(int  i = temp.size()-1 ; i>=0 ; i--){
            res.push_back(temp[i]);
        }
return res;
}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    string nq_temp;
    getline(cin, nq_temp);

    vector<string> nq = split_string(nq_temp);

    int n = stoi(nq[0]);

    int q = stoi(nq[1]);

    string number_temp_temp;
    getline(cin, number_temp_temp);

    vector<string> number_temp = split_string(number_temp_temp);

    vector<int> number(n);

    for (int number_itr = 0; number_itr < n; number_itr++) {
        int number_item = stoi(number_temp[number_itr]);

        number[number_itr] = number_item;
    }

    vector<int> result = waiter(number, q);

    for (int result_itr = 0; result_itr < result.size(); result_itr++) {
        fout << result[result_itr];

        if (result_itr != result.size() - 1) {
            fout << "\n";
        }
    }

    fout << "\n";

    fout.close();

    return 0;
}

vector<string> split_string(string input_string) {
    string::iterator new_end = unique(input_string.begin(), input_string.end(), [] (const char &x, const char &y) {
        return x == y and x == ' ';
    });

    input_string.erase(new_end, input_string.end());

    while (input_string[input_string.length() - 1] == ' ') {
        input_string.pop_back();
    }

    vector<string> splits;
    char delimiter = ' ';

    size_t i = 0;
    size_t pos = input_string.find(delimiter);

    while (pos != string::npos) {
        splits.push_back(input_string.substr(i, pos - i));

        i = pos + 1;
        pos = input_string.find(delimiter, i);
    }

    splits.push_back(input_string.substr(i, min(pos, input_string.length()) - i + 1));

    return splits;
}

